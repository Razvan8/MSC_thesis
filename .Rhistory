main_effects_and_interactions
# Extract interactions from main_effects_and_interactions
list_of_interactions <- lapply(main_effects_and_interactions, function(x) x$interactions)
# Display the result
print(list_of_interactions)
beta=c(1,2,3,4,5,5)
interactions=list(list(1,3,5), list(2,4,6))
lambda=1
penalty(beta, interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(beta[interaction[[1]] ], sum(abs(beta[interaction[[-1]] ])) )
print(beta[interaction[[-1]] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[length(interactions):length(beta)])) ##lambda/2 if weak
return(total_penalty)
}
beta=c(1,2,3,4,5,5)
interactions=list(list(1,3,5), list(2,4,6))
lambda=1
penalty(beta, interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(beta[interaction[[1]] ], sum(abs(beta[interaction[-1] ])) )
print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[length(interactions):length(beta)])) ##lambda/2 if weak
return(total_penalty)
}
beta=c(1,2,3,4,5,5)
interactions=list(list(1,3,5), list(2,4,6))
lambda=1
penalty(beta, interactions,lambda)
for (interaction in interactions)
print(interaction)
beta=rep(0,515)
lambda=1
penalty(beta, list_of_interactions,lambda)
beta=rep(0,515)
beta[1:40]=1
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(beta[interaction[[1]] ], sum(abs(beta[interaction[-1] ])) )
print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[length(interactions)+1:length(beta)])) ##lambda/2 if weak
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(beta[interaction[[1]] ], sum(abs(beta[interaction[-1] ])) )
print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
lambda=1
penalty(beta, list_of_interactions,lambda)
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(beta[interaction[[1]] ], sum(abs(beta[interaction[[-1]] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[[2:lenght(interaction)]] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[[2:length(interaction)]] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[2:length(interaction)] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
for (interaction in interactions) {
# Compute penalty for current interaction
#print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[2:length(interaction)] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
print(total_penalty)
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
print(length(interactions))
for (interaction in interactions) {
# Compute penalty for current interaction
#print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[2:length(interaction)] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
print(total_penalty)
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
print(length(interactions))
i=0
for (interaction in interactions) {
i<-i+1
print(i)
# Compute penalty for current interaction
#print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[2:length(interaction)] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
print('total penalty now:')
print(total_penalty)
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
penalty <- function(beta, interactions, lambda) {
total_penalty <- 0
print(length(interactions))
i=0
for (interaction in interactions) {
i<-i+1
print('i')
print(i)
# Compute penalty for current interaction
#print(interaction)
penalty_term <- max(abs(beta[interaction[[1]] ]) , sum(abs(beta[interaction[2:length(interaction)] ])) )
#print(beta[interaction[-1] ])
# Add lambda times penalty term to total penalty
total_penalty <- total_penalty + lambda * penalty_term
print('total penalty now:')
print(total_penalty)
}
print(total_penalty)
total_penalty<- total_penalty +lambda* sum(abs(beta[41:length(beta)])) ##lambda/2 if weak ##TAKE CARE 41 hardcoded
return(total_penalty)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty(beta, list_of_interactions,lambda)
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- numeric(length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
# Compute the penalty term for the interaction
penalty_term <- pmax(abs(beta[interaction[[1]]]), rowSums(abs(beta[interaction[-1]])))
# Compute the gradient for the interaction
interaction_gradient <- lambda * (beta[interaction[[1]]] > 0) * (abs(beta[interaction[[1]]]) >= rowSums(abs(beta[interaction[-1]]))) -
lambda * (beta[interaction[[1]]] < 0) * (abs(beta[interaction[[1]]]) > rowSums(abs(beta[interaction[-1]])))
# Add interaction gradient to the overall gradient
gradient[interaction] <- gradient[interaction] + interaction_gradient
}
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- numeric(length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
# Compute the gradient for the interaction
interaction_gradient <- lambda * (beta[interaction[[1]]] > 0) * (abs(beta[interaction[[1]]]) >= rowSums(abs(beta[interaction[-1]]))) -
lambda * (beta[interaction[[1]]] < 0) * (abs(beta[interaction[[1]]]) > rowSums(abs(beta[interaction[-1]])))
# Add interaction gradient to the overall gradient
gradient[interaction] <- gradient[interaction] + interaction_gradient
}
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- numeric(length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
# Compute the gradient for the interaction
interaction_gradient <- lambda * (beta[interaction[[1]]] > 0) * (abs(beta[interaction[[1]]]) >= sum(abs(beta[interaction[-1]]))) -
lambda * (beta[interaction[[1]]] < 0) * (abs(beta[interaction[[1]]]) > sum(abs(beta[interaction[-1]])))
# Add interaction gradient to the overall gradient
gradient[interaction] <- gradient[interaction] + interaction_gradient
}
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- numeric(length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
# Compute the gradient for the interaction
interaction_gradient <- lambda * (beta[interaction[[1]]] > 0) * (abs(beta[interaction[[1]]]) >= sum(abs(beta[interaction[-1]]))) -
lambda * (beta[interaction[[1]]] < 0) * (abs(beta[interaction[[1]]]) > sum(abs(beta[interaction[-1]])))
# Add interaction gradient to the overall gradient
gradient[interaction] <- gradient[interaction] + interaction_gradient
}
print(gradient)
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
add_gradient_max_abs_l1 <- function(b, indices, gradient) {
abs_values <- abs(b[indices])
max_abs <- max(abs_values[1],sum(abs_values[2:length(abs_values)]) )
if (abs_values[1] >= max_abs)
gradient[indices[1]]<-gradient[indices[1]] +sign(b[indices[1]])
if (sum(abs_values[2:length(abs_values)]) >= max_abs)
gradient[indices[2:length(indices)]]<-gradient[indices[2:length(indices)]] +sign(b[indices[2:length(indices)]])
return(gradient)
}
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- rep(0, length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
gradient<-add_gradient_max_abs_l1(beta, interaction, gradient )
}
print(gradient)
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
beta[515]=2
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(0,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(-0.1,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(-0.0001,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(1e-6,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
add_gradient_max_abs_l1 <- function(b, indices, gradient) {
abs_values <- abs(b[indices])
max_abs <- max(abs_values[1],sum(abs_values[2:length(abs_values)]) )
print(max_abs)
print(abs_values[1])
print(sum(abs_values[2:length(abs_values)]))
print('--------')
if (abs_values[1] >= max_abs)
gradient[indices[1]]<-gradient[indices[1]] +sign(b[indices[1]])
if (sum(abs_values[2:length(abs_values)]) >= max_abs)
gradient[indices[2:length(indices)]]<-gradient[indices[2:length(indices)]] +sign(b[indices[2:length(indices)]])
return(gradient)
}
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- rep(0, length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
gradient<-add_gradient_max_abs_l1(beta, interaction, gradient )
}
print(gradient)
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(1e-6,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
add_gradient_max_abs_l1 <- function(b, indices, gradient) {
abs_values <- abs(b[indices])
max_abs <- max(abs_values[1],sum(abs_values[2:length(abs_values)]) )
print(length(abs_values))
print(max_abs)
print(abs_values[1])
print(sum(abs_values[2:length(abs_values)]))
print('--------')
if (abs_values[1] >= max_abs)
gradient[indices[1]]<-gradient[indices[1]] +sign(b[indices[1]])
if (sum(abs_values[2:length(abs_values)]) >= max_abs)
gradient[indices[2:length(indices)]]<-gradient[indices[2:length(indices)]] +sign(b[indices[2:length(indices)]])
return(gradient)
}
penalty_gradient <- function(beta, interactions, lambda) {
# Initialize gradient vector
gradient <- rep(0, length(beta))
# Compute gradient for each interaction
for (interaction in interactions) {
gradient<-add_gradient_max_abs_l1(beta, interaction, gradient )
}
print(gradient)
# Compute gradient for the rest of beta (beyond interaction indexes)
gradient[41:length(beta)] <- gradient[41:length(beta)] + lambda * sign(beta[41:length(beta)])
return(gradient)
}
beta=rep(1e-6,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(1e-6,515)
beta[1:40]=1
beta[41]=3
beta[515]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
beta=rep(1e-6,515)
beta[1:40]=1
beta[41]=3
beta[42]=1
lambda=1
penalty_gradient(beta, list_of_interactions,lambda)
total_gradient<-function(beta, interactions, lambda, Z,W,X){
result<-gradient(beta, Z, X, W) + penalty_gradient(beta, interactions, lambda)
return(result)}
total_loss<-function(beta, Z, X, W, interactions, lambda)
{ result<-weighted_ls_objective(beta, Z, X, W) + penalty(beta, interactions, lambda)
return(result)}
source('GLM_weak_HierNet_functions.R')
beta_result<-fisher_scoring_lasso(y=y_train, X=X_all_train, beta_init=lm(y_train~X_all_train)$coef, interactions=list_of_interactions, lambda=50,tol=0.03, max_iter=10) #The higher no of iters the better the result but takes loong
beta_result<-beta_result$beta.hat
pred_train<-sapply(as.vector(as.matrix(X_all_train)%*%beta_result[-1]+beta_result[1]), my_k_prime)
pred_test<-sapply(as.vector(as.matrix(X_all_test)%*%beta_result[-1]+beta_result[1]), my_k_prime)
print("rmse mine:")
print(sqrt(mean((pred_train*100-y_train*100)^2)))
print('r2 mine')
print(r2(y_train, pred_train))
print(r2(y_test, pred_test))
print(beta_result)
print(sum(abs(beta_result)<=1e-4)))
print(sum(abs(beta_result)<=1e-4))
source('GLM_weak_HierNet_functions.R')
beta_result<-fisher_scoring_lasso(y=y_train, X=X_all_train, beta_init=lm(y_train~X_all_train)$coef, interactions=list_of_interactions, lambda=50,tol=0.03, max_iter=10) #The higher no of iters the better the result but takes loong
beta_result<-beta_result$beta.hat
pred_train<-sapply(as.vector(as.matrix(X_all_train)%*%beta_result[-1]+beta_result[1]), my_k_prime)
pred_test<-sapply(as.vector(as.matrix(X_all_test)%*%beta_result[-1]+beta_result[1]), my_k_prime)
print("rmse mine:")
print(sqrt(mean((pred_train*100-y_train*100)^2)))
print('r2 mine')
print(r2(y_train, pred_train))
print(r2(y_test, pred_test))
print(sum(abs(beta_result)<=1e-4))
