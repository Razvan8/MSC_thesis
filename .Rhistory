# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=12000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=12000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=16000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=16000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
fitted
y_pred<-myWeakHierNet$predict(self=fitted, X_all_test)
plot(y_pred, scale(y_test, scale= FALSE))
sum(abs(fitted$Theta_hat)<=0.000001)
###se the nr of 0s
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
lamhat=1
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
print(fit$th)
options(max.print=1e6)
print(fit)
print(dim(fit$th))
#checkBlocks(fit$th,15,4)
fit$th
fit$lam
max(yhat)
max(y_test)
print("------------")
y_train
zero_matrix_operation(fit$th,21,14,2,3)
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=1, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=1, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
lamhat=10
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd1_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
fitted
y_pred<-myWeakHierNet$predict(self=fitted, X_all_test)
plot(y_pred, scale(y_test, scale= FALSE))
sum(abs(fitted$Theta_hat)<=0.000001)
###se the nr of 0s
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd10_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
folder_name <- "Results"
file_name <- "llmd1_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- scan(file_path)
# Split the data into beta_plus, beta_minus, and theta
p <- sqrt(length(data)+1)-1 ## there are p^2 +2p elems
print(p)
beta_plus <- as.vector(data[1:p])
beta_minus <- as.vector(data[(p + 1):(2 * p)])
theta <- matrix(data[(2 * p + 1):length(data)], ncol = p)
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "llmd1_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
find(theta_lmd1==0)
lm1_idx=which(theta_lmd1==0)
lm10_idx=which(fitted$Theta_hat==0)
lm1_idx
intersect(lm1_idx, lm10_idx)
length(intersect(lm1_idx, lm10_idx))
length(lm1_idx)
length(lm10_idx)
source("WeakHierNet_Class_corrected.R")
print('My weakhiernet')
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd50_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
# Example usage:
folder_name <- "Results"
file_name <- "llmd10_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm10_idx)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lamhat=50
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
lm1_idx=which(fit$th==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd80_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
# Example usage:
folder_name <- "Results"
file_name <- "llmd50_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
lm1_idx=which(fit$th==0)
lm2_idx=which(theta_lmd1==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lamhat=80
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
lm1_idx=which(fit$th==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=100, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=100, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd100_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
lamhat=100
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
library(hierNet)
lamhat=100
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
lm1_idx=which(fit$th==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lm1_idx=which(fit$th==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=500, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=500, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10000, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10000, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50000, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50000, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
fitted
y_pred<-myWeakHierNet$predict(self=fitted, X_all_test)
plot(y_pred, scale(y_test, scale= FALSE))
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
colnames(xx)
xx
X_xx<-xx
source("WeakHierNet_Class_corrected.R")
print('My weakhiernet')
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
t<-6e-6+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
f
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "lmd50_it10k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
t<-6e-4+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
t<-6e-5+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
t<-6e-6+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
folder_name <- "Results"
file_name <- "lmd80_it10k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "lmd10_it10k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "lmd50_it10k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
# Example usage:
folder_name <- "Results"
file_name <- "lmd80_it10k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
t<-6e-6+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "lmd100_it10k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
# Example usage:
folder_name <- "Results"
file_name <- "lmd80_it10k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=5e4, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=5e4, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
t<-6e-6+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
###se the nr of 0s
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
