# Plate 2.1
plate2.1 <- read.csv("yield_data\\plate2.1.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.1_pdt <- plate2.1$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.1_pdt))
dim(plate.data) <- c(24,16)
plate.data2.1 <- t(plate.data)
# Plate 2.2
plate2.2 <- read.csv("yield_data\\plate2.2.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.2_pdt <- plate2.2$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.2_pdt))
dim(plate.data) <- c(24,16)
plate.data2.2 <- t(plate.data)
# Plate 2.3
plate2.3 <- read.csv("yield_data\\plate2.3.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.3_pdt <- plate2.3$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.3_pdt))
dim(plate.data) <- c(24,16)
plate.data2.3 <- t(plate.data)
# Plate 2.4
plate2.4 <- read.csv("yield_data\\plate2.4.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate2.4_pdt <- plate2.4$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate2.4_pdt))
dim(plate.data) <- c(24,16)
plate.data2.4 <- t(plate.data)
# stitch Plate 2 together into one 32x48 matrix
plate2.top <- cbind(plate.data2.1, plate.data2.2)
plate2.bottom <- cbind(plate.data2.3, plate.data2.4)
plate2 <- rbind(plate2.top, plate2.bottom)
# Plate 3.1
plate3.1 <- read.csv("yield_data\\plate3.1.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.1_pdt <- plate3.1$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.1_pdt))
dim(plate.data) <- c(24,16)
plate.data3.1 <- t(plate.data)
# Plate 3.2
plate3.2 <- read.csv("yield_data\\plate3.2.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.2_pdt <- plate3.2$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.2_pdt))
dim(plate.data) <- c(24,16)
plate.data3.2 <- t(plate.data)
# Plate 3.3
plate3.3 <- read.csv("yield_data\\plate3.3.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.3_pdt <- plate3.3$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.3_pdt))
dim(plate.data) <- c(24,16)
plate.data3.3 <- t(plate.data)
# Plate 3.4
plate3.4 <- read.csv("yield_data\\plate3.4.csv", header=TRUE, stringsAsFactors=FALSE, na.strings = "#DIV/0!")
plate3.4_pdt <- plate3.4$product_scaled[1:384]
plate.data <- as.matrix(as.numeric(plate3.4_pdt))
dim(plate.data) <- c(24,16)
plate.data3.4 <- t(plate.data)
# stitch Plate 3 together into one 32x48 matrix
plate3.top <- cbind(plate.data3.1, plate.data3.2)
plate3.bottom <- cbind(plate.data3.3, plate.data3.4)
plate3 <- rbind(plate3.top, plate3.bottom)
# Remove empty rows/cols
plate1_nocontrols <- plate1[c(-1,-5,-9,-13,-20,-24,-28,-32), c(-16,-32,-48)]
plate2_nocontrols <- plate2[, c(-16,-32,-48)]
plate3_nocontrols <- plate3[, c(-16,-32,-48)]
plate1_nocontrols_v <- as.vector(t(plate1_nocontrols))
plate2_nocontrols_v <- as.vector(t(plate2_nocontrols))
plate3_nocontrols_v <- as.vector(t(plate3_nocontrols))
yield_data <- c(plate1_nocontrols_v, plate2_nocontrols_v, plate3_nocontrols_v)
# Load output table generated by python script
output.table <- read.csv("yield_data\\output_table.csv", header=TRUE)
# Scaled variables
y <- as.data.frame(yield_data[-which(is.na(yield_data))]/100)
x <- as.data.frame(output.table[-which(is.na(yield_data)),])
#x <- as.data.frame(scale(output.table[-which(is.na(yield_data)),]))
tt <- (1:length(y[,1]))/length(y)
# Add three artificial descriptors for additives
xc <- x
set.seed(2134)
c1 <- factor(xc[,1])
c2 <- factor(xc[,3])
c3 <- factor(xc[,4])
levels(c1) <- runif(22)
levels(c2) <- rnorm(22)
levels(c3) <- runif(22)
xc <- cbind(cbind(as.numeric(c1),as.numeric(c2),as.numeric(c3)),xc)
colnames(xc)[1:3] <- c("add_new1","add_new2","add_new3")
xs <- xc[,c(4,23,50,60)]
colnames(xs) <- c("additive","aryl_halide","base","ligand")
a <- rep(NA,ncol(xs))
for (i in 1:ncol(xs)) a[i] <- length(unique(xs[,i]))
xcf <- matrix(NA,nrow(xs),sum(a))
b <- cumsum(a)
colnames(xcf) <- rep(colnames(xs),times=a)
colnum <- order(unique(xs[,1]))
for (i in 2:ncol(xs)) colnum <- c(colnum,order(unique(xs[,i])))
colnames(xcf) <- paste(colnames(xcf),colnum)
for (i in 1:nrow(xs))
{
for (j in 1:length(a))
{
res <- rep(0, a[j])
where <- match( xs[i,j], unique(xs[,j]) )
res[ where ] <- 1
xcf[i,(max(b[j-1],0)+1):b[j]] <- res
}
}
for (i in 1:length(b))
{
ind <- match(xcf[,b[i]],1)==1
xcf[ind,(max(b[i-1],0)+1):b[i]] <- -1
}
xcf <- xcf[,-b]
x.all <- xcf
# Identify label ijkl for yield
for (ijkl in 1:length(tt)) {
add.i <- colnames(x.all)[which(x.all[ijkl,]!=0)][1]
add.I <- sum(grepl("additive",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (add.I>1) add.i <- "additive 0"
ary.j <- colnames(x.all)[which(x.all[ijkl,]!=0)][1+add.I]
ary.J <- sum(grepl("aryl_halide",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (ary.J>1) ary.j <- "aryl_halide 0"
bas.k <- colnames(x.all)[which(x.all[ijkl,]!=0)][1+add.I+ary.J]
bas.K <- sum(grepl("base",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (bas.K>1) bas.k <- "base 0"
lig.l <- colnames(x.all)[which(x.all[ijkl,]!=0)][1+add.I+ary.J+bas.K]
lig.L <- sum(grepl("ligand",colnames(x.all)[which(x.all[ijkl,]!=0)]))
if (lig.L>1) lig.l <- "ligand 0"
rownames(y)[ijkl] <- paste(add.i, ary.j, bas.k, lig.l, sep=":")
}
y.all <- y
# Mixed terms with 2-levels combinations
xx <- rep(1,nrow(xcf))
bb <- cumsum(a-1)
for (j in 1:3) {
for (i in (max(bb[j-1],0)+1):bb[j]) {
xxp <- xcf[,i]*xcf[,-c(1:bb[j])]
colnames(xxp) <- paste(colnames(xcf)[i],colnames(xcf[,-c(1:bb[j])]),sep=":")
xx <- cbind(xx,xxp)
}
}
xx <- cbind(xcf,xx[,-1])
xx.all <- xx
# Mixed terms with 3-levels combinations
xcf1 <- xcf
colnames(xcf1) <- c(rep("additive",21),rep("aryl_halide",14),rep("base",2),rep("ligand",3))
xx1 <- xx[,-c(1:40)]
xxx <- rep(1,nrow(xcf))
ind <- rep(TRUE,ncol(xx1))
for (j in 1:2) {
ind <- as.logical((!grepl(colnames(xcf1)[bb[j]],colnames(xx1)))*(ind))
for (i in (max(bb[j-1],0)+1):bb[j]) {
xxxp <- xcf[,i]*xx1[,ind]
colnames(xxxp) <- paste(colnames(xcf)[i],colnames(xx1)[ind],sep=":")
xxx <- cbind(xxx,xxxp)
}
}
xxx <- cbind(xx,xxx[,-1])
xxx.all <- xxx
# Mixed terms with 4-levels combinations
xxx1 <- xxx[,-c(1:515)]
xxxx <- rep(NA,nrow(xcf))
for (i in 1:21) {
xxxxp <- xcf[,i]*xxx1[,1597:1680]
colnames(xxxxp) <- paste(colnames(xcf)[i],colnames(xxx1)[1597:1680],sep=":")
xxxx <- cbind(xxxx,xxxxp)
}
xxxx <- cbind(xxx,xxxx[,-1])
xxxx.all <- xxxx
################################################################################
## Data Analysis on artificial ANOVA with two factors and two-way interactions
################################################################################
X_only_main<-x.all
print(dim(y))
X_all_main<-xx.all ##have X_all_main for later
print(dim(X_all_main))
############################################ FUNCTIONS THAT I USE ######################################################################
checkBlocks <- function(mat, u, l) {
if (u + l != nrow(mat) || nrow(mat) != ncol(mat)) {
stop("Input matrix is not square or does not match u + l.")
}
# Check upper-left u x u block
upper_left_block <- mat[1:u, 1:u]
if (any(upper_left_block != 0)) {
non_zero_positions <- which(upper_left_block != 0, arr.ind = TRUE)
cat("Non-zero entries in upper-left block:\n")
for (i in 1:nrow(non_zero_positions)) {
cat("Position:", non_zero_positions[i, ])
}
} else {
cat("No non-zero entries in the upper-left block.\n")
}
# Check lower-right l x l block
lower_right_block <- mat[(nrow(mat) - l + 1):nrow(mat), (ncol(mat) - l + 1):ncol(mat)]
if (any(lower_right_block != 0)) {
non_zero_positions <- which(lower_right_block != 0, arr.ind = TRUE)
cat("Non-zero entries in lower-right block:\n")
for (i in 1:nrow(non_zero_positions)) {
cat("Position:", non_zero_positions[i, ] + c((nrow(mat) - l + 1), (ncol(mat) - l + 1)))
}
} else {
cat("No non-zero entries in the lower-right block.\n")
}
}
# Example usage:
# Create a 5x5 square matrix
#example_matrix <- matrix(c(1, 10, 3, 0, 0,
#0, 2, 0, 0, 0,
#0, 0, 0, 0, 0,
#0, 4, 0, 10, 5,
#7, 7, 7, 10, 0), nrow = 5, byrow = TRUE)
# Check blocks with u = 2 and l = 3
#checkBlocks(example_matrix, 3, 2)
r2 <- function(actual, predicted) {
# Calculate the mean of the actual values
mean_actual <- mean(actual)
# Calculate the total sum of squares
total_sum_squares <- sum((actual - mean_actual)^2)
# Calculate the residual sum of squares
residual_sum_squares <- sum((actual - predicted)^2)
# Calculate R-squared
r_squared <- 1 - (residual_sum_squares / total_sum_squares)
return(r_squared)
}
pairwise_product <- function(A, B) {
# Get the number of columns in each matrix
ncol_A <- ncol(A)
ncol_B <- ncol(B)
# Initialize an empty list to store the pairwise products
products <- list()
# Loop through all combinations of columns
for (i in 1:ncol_A) {
for (j in 1:ncol_B) {
# Calculate the pairwise product and store it in the list
products[[length(products) + 1]] <- A[, i] * B[, j]
}
}
# Combine the pairwise products into a single matrix
result <- do.call(cbind, products)
return(result)
}
create_pairwise_interactions <- function(X, num_categories_list) {
num_factors <- length(num_categories_list)
num_cols <- (sum(num_categories_list)^2- sum(num_categories_list^2))/2 ## sum ab= [(sum a)^2- sum a^2]/2
# Initialize the new matrix for pairwise interactions
pairwise_interactions <- matrix(0, nrow = nrow(X), ncol = num_cols)
col_idx_start <- 1
# Iterate over all pairs of different factors
for (i in 1:(num_factors - 1)) {
for (j in (i + 1):num_factors) {
# Get the number of categories for factor i and factor j
num_categories_i <- num_categories_list[i]
num_categories_j <- num_categories_list[j]
col_idx_final<-col_idx_start+num_categories_i*num_categories_j-1 #substract the one where w start
# Extract columns corresponding to factor i and factor j
if (i==1)
{cols_i<-(1:num_categories_list[i])}
else
{
cols_i <- (sum(num_categories_list[1:(i - 1)]) + 1):(sum(num_categories_list[1:i])) }
cols_j <- (sum(num_categories_list[1:(j - 1)]) + 1):(sum(num_categories_list[1:j]))
print('cols i')
print(cols_i)
print('colsj')
print(cols_j)
# Compute the pairwise interactions between factor i and factor j
print("matrix i")
print(matrix(X[,cols_i], ncol = length(cols_i)))
pairwise_interaction <- pairwise_product(matrix(X[,cols_i], ncol = length(cols_i)), matrix(X[,cols_j], ncol = length(cols_j))  )
print('a')
# Store the pairwise interactions in the new matrix
pairwise_interactions[, col_idx_start:col_idx_final] <- pairwise_interaction
# Increment the column index
col_idx_start<-col_idx_final+1
}
}
return(pairwise_interactions)
}
# Order the column names
#sorted_column_names <- sort(colnames(X_all_main))
# Reorder the columns of your data frame using the sorted column names
#X_all_main <- X_all_main[, sorted_column_names]
print(colnames((X_only_main)))
X_xx<-xx
X_all_main
colnames(X_xx)
class(X_xx)
sum(X_xx[,155])
all(X_xx[,37]*X_xx[,40]==X_xx[,515])
#################### PREP AND SPLIT DATA #######################################################################################################
#libraries
####### main data has only halide and ligand ###############
library(Metrics)
library(hierNet)
library(caret)
library(dplyr)
library(Metrics)
names(y)[ncol(y)] <- "yield"
halide_columns <- c(
"aryl_halide 12", "aryl_halide 6", "aryl_halide 9", "aryl_halide 15", "aryl_halide 3",
"aryl_halide 5", "aryl_halide 4", "aryl_halide 8", "aryl_halide 14", "aryl_halide 7",
"aryl_halide 13", "aryl_halide 2", "aryl_halide 1", "aryl_halide 10")
ligand_columns <- c("ligand 4", "ligand 3", "ligand 1")
X_halide <-  xxxx[, halide_columns, drop = FALSE]
X_ligand <- xxxx[, ligand_columns, drop = FALSE]
X_main <- cbind(X_halide, X_ligand)
main_data <- cbind(X_main, y$yield)
#names(main_data)[ncol(main_data)] <- "yield" #name the y column
dim(main_data)# 19 cols+ 1yield=20 cols
colnames(main_data)
main_data
##TRAIN TEST SPLIT using only main#
index <- createDataPartition(y = y$yield, p = 0.7, list = FALSE)
train_data <- main_data [index,]
test_data <- main_data [-index,]
train_data
# Separate X_train, X_test, y_train, y_test
X_train <- train_data[, -ncol(train_data)]
y_train <- train_data[, ncol(train_data)]
X_test <- test_data[, -ncol(test_data)]
y_test <- test_data[, ncol(test_data)]
y_train<-y_train*100
y_test<-y_test*100
print(dim(X_train))
print(dim(X_test))
print(length(y_train))
print(length(y_test))
y
length(y)
y
length(y$yield)
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
t<-6e-7+3e-8
#t<-0.001
colnames(X_only_main)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
t<-6e-6+3e-8
#t<-0.001
colnames(X_only_main)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
t<-6e-3+3e-8
#t<-0.001
colnames(X_only_main)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
y$yield
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield*100, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y$yield*100, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
y_all_centered<-scale(y$yield, center = True, scale = FALSE)
y_all_centered<-scale(y$yield, center = True, scale = FALSE)
y_all_centered<-scale(y$yield, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=1, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
source("WeakHierNet_Class_corrected_unscaled.R")
print('My weakhiernet')
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
t<-6e-7+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_only_main
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_only_main), y_true = y_all_centered, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
fitted$Theta_hat
t<-6e-5+3e-8
#t<-0.001
colnames(X_only_main)
y_all_centered<-scale(y$yield*100, center = TRUE, scale = FALSE)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=100, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
fitted$Theta_hat
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=10, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=10, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
myWeakHierNet<-WeakHierNetUnscaled (X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=10, t=t, tol=1e-7,
max_iter=10000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_only_main, Beta_plus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_only_main)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_only_main)[2], nrow = dim(X_only_main)[2]), y=y_all_centered, lambda=10, t=t, tol=1e-7,
max_iter=10000, eps=1e-8 )
# Make predictions
new_X <- X_only_main
print("R2 score on all data")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_only_main), y_true = y_all_centered, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
