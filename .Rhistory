cat("i:", i, ", j:", j, ", k:", k ,'\n')
}}}
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 1
psi[1, 4, 7] <- 1
psi[1, 5, 9] <- 1
get_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
get_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
### case 1
for (i in c(1:l1)) {
for (j in c((l1+1):(l1+l2) ) ) {
for (k in c( (l1+l2+1): (l1+l2+l3) ) ) {
cat("i:", i, ", j:", j, ", k:", k ,'\n')
}}}
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 1
psi[1, 4, 7] <- 1
psi[1, 5, 9] <- 1
get_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
### case 1 have aditive, aryl halide and anything else
for (i in c(1:l1)) {
for (j in c((l1+1):(l1+l2) ) ) {
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {
cat("i:", i, ", j:", j, ", k:", k ,'\n')
}}}
get_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
### CASE 1 have aditive, aryl halide and anything else
for (i in c(1:l1)) {
for (j in c((l1+1):(l1+l2) ) ) {
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {
cat("i:", i, ", j:", j, ", k:", k ,'\n')
}}}
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 1
psi[1, 4, 7] <- 1
psi[1, 5, 9] <- 1
get_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
print(get_possible_positions(l1=3,l2=2,l3=2,l4=2))
get_possible_positions<- function(l1,l2,l3,l4) #get possible positions only once and return a list of tuples of these positions
{
list_possible_combinations <- list()
#### case 1 additive aryle-halyde and (base or ligand)
for (i in c(1:l1)) { #aditive
for (j in c((l1+1):(l1+l2) ) ) { #aryl halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base/ligand
list_possible_combinations <- append(list_possible_combinations, list(c(i,j,k)))
}}}
### case 2 additive base ligand
for (i in c(1:l1)) { #aditive
for (j in c( (l1+l2+1): (l1+l2+l3) ) ){ #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ){ #ligand
list_possible_combinations<-  append(list_possible_combinations, list(c(i,j,k)))
}}}
### case 3 aryle-halide base ligand
for (i in c((l1+1):(l1+l2))) { #aryl-halide
for (j in c( (l1+l2+1): (l1+l2+l3) ) ){ #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ){ #ligand
list_possible_combinations<-  append(list_possible_combinations, list(c(i,j,k)))
}}}
return(list_possible_combinations)
}
print(get_possible_positions(l1=3,l2=2,l3=2,l4=2))
my_table <- array(1:64, dim = c(4, 4, 4))
psi_value_from_table_position<-function (table,i,j,k)
{return( (table[i,j,k] + table[i,k,j] + table [j,i,k] +table[j,k,i] + table[k,i,j] + table[k,j,i] )/6)}
psi_value_from_table_position(my_table,1,1,1)
psi_value_from_table_position(my_table,1,2,3)
psi_value_from_table_position(my_table,1,2,4)
psi_value_from_table_position(my_table,1,2,1)
print(get_possible_positions(l1=3,l2=2,l3=2,l4=2))
psi_value_from_table_position(my_table,1,2,1)
print(table[2,1,1])
print(my_table[2,1,1])
print(my_table[1,1,2])
print(my_table[1,2,1])
print(dim(xxx.all))
print(colnames(xxx.all)[2134])
table_position_to_vector_index(c(25,37,39))
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 }
return(position_psi)
}
table_position_to_vector_index(c(25,37,39))
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 +(z-l123)}
return(position_psi)
}
table_position_to_vector_index(c(25,37,39))
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 +(z-l123)}
return(position_psi)
}
table_position_to_vector_index(c(3,23,38))
table_position_to_vector_index(c(3,37,40))
table_position_to_vector_index(c(1,22,36))
table_position_to_vector_index(c(1,22,40))
table_position_to_vector_index(c(1,23,36))
table_position_to_vector_index(c(1,25,36))
table_position_to_vector_index(c(1,25,37))
table_position_to_vector_index(c(2,23,37))
array(0, dim=c(10))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 +(z-l123)}
return(position_psi)
}
#table_position_to_vector_index(c(2,23,37))
get_psi_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
psi_vec<-array(0, dim=c(l1*l2*l3+l1*l2*l4+l1*l3*l4+l2*l3*l4) )
### CASE 1 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 2 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 3 have halide,  base, ligand
for (i in c(l1+1:l1+l2)) { #halide
for (j in c((l1l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
return(psi_vec)
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[1, 5, 9] <- 6
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
get_psi_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
psi_vec<-array(0, dim=c(l1*l2*l3+l1*l2*l4+l1*l3*l4+l2*l3*l4) )
### CASE 1 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 2 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 3 have halide,  base, ligand
for (i in c(l1+1:l1+l2)) { #halide
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
return(psi_vec)
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[1, 5, 9] <- 6
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 9] <- 3
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
get_psi_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
psi_vec<-array(0, dim=c(l1*l2*l3+l1*l2*l4+l1*l3*l4+l2*l3*l4) )
### CASE 1 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 2 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 3 have halide,  base, ligand
for (i in c((l1+1):(l1+l2)) ) { #halide
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
return(psi_vec)
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 9] <- 3
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
psi<-  array(6, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 9] <- 6
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
length(get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2))
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
x<-array(0,dim=c(3,3,2))
print(x[1,1,])
c(c(1,2,3),c(2,3))
list(c(1,2,3),c(2,3))
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi.l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
psi[i, ,j]=0
psi[,i,j]=0}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
psi[i, ,j]=0
psi[,i,j]=0}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]<-0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,c(1:(l1+l2+l3+l4))]<-0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]<-0
psi[i, ,j]=0
psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=2,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]<-0
psi[i, ,j]=0
psi[,i,j]=0
}}}
return(psi)
}
set_0s_psi(psi, l1=3,l2=2,l3=2,l4=2)
get_all_possible_kj<-function(l1=21,l2=14,l3=3,l4=2)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
all_possible = c(range1, range2, range3, range4)
possible_kj=list()
## ij
for ( range in list(range1, range2, range3, range4)  ){
for (i in range){
for (j in setdiff(all_possible,range) ){
possible_kj<-append(possible_kj,c(i,j))
}}}
return(possible_kj)
}
get_all_possible_kj(l1=3,l2=2,l3=2,l4=2)
get_all_possible_kj<-function(l1=21,l2=14,l3=3,l4=2)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
all_possible = c(range1, range2, range3, range4)
possible_kj=list()
## ij
for ( range in list(range1, range2, range3, range4)  ){
for (i in range){
for (j in setdiff(all_possible,range) ){
possible_kj <- c(possible_kj, list(c(i, j)))
}}}
return(possible_kj)
}
get_all_possible_kj(l1=3,l2=2,l3=2,l4=2)
get_all_possible_kj(l1=21,l2=14,l3=3,l4=2)
