max_iter=7000, eps=1e-8 )
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=200, t=t, tol=1e-8,
max_iter=7000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=200, t=t, tol=1e-8,
max_iter=7000, eps=1e-8 )
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
## CREATE DATASET
# Set a seed for reproducibility
set.seed(123)
# Number of rows in the dataset
n <- 200
# Generate predictor variables
col1 <- rnorm(n, mean=1,sd=10)
col2 <- rnorm(n, mean = 2,sd=10)
# Generate noise
noise <- rnorm(n, mean = 0, sd = 0.1)
# Generate response variable
response <- 0 * col1 + 0 * col2 + noise  + 2 *col1*col2
#Combine predictors and response into a data frame
#synthetic_data <- data.frame(col1, col2, response)
X <- cbind(col1,col2)
y <- response
Beta_plus_init <- matrix(c(0, 0), ncol=1)
Beta_minus_init <- matrix(c(0, 0), ncol =1)
Theta_init <- matrix(100, nrow = 2, ncol = 2)
lambda <- 100
t<-0.0001
eps=1e-8
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet <- WeakHierNet(X=X, Beta_plus_init= Beta_plus_init  , Beta_minus_init = Beta_minus_init,
Theta_init = Theta_init, y=y, lambda = lambda, t=t, tol=1e-6)
# Fit the model
fitted=myWeakHierNet$fit(X=X, y=y, lambda=lambda, t = t, tol = 1e-6, max_iter = 5000, eps = 1e-8, Beta_plus_init = Beta_plus_init,
Beta_minus_init =  Beta_minus_init, Theta_init =  Theta_init)
# Make predictions
new_X <- X
predictions <- myWeakHierNet$predict(fitted, as.matrix(new_X))
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y, verbose = TRUE)
fitted
lambda=1e2
fit=hierNet(as.matrix(X),y, lam = lambda, diagonal = FALSE, step = 1e-4)
yhat=predict(fit,as.matrix(X))
print(paste("r2- hiernet library:", r2(y, yhat)))
fit$bp
fit$bn
fit
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=200, t=t, tol=1e-5,
max_iter=7000, eps=1e-7)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=200, t=t, tol=1e-5,
max_iter=7000, eps=1e-7 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
###se the nr of 0s
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
lamhat=200
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=200, t=t, tol=1e-6,
max_iter=7000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=200, t=t, tol=1e-6,
max_iter=7000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
store_vectors_theta <- function(beta_plus, beta_minus, theta, folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Write beta_plus, beta_minus, and theta to the file
write.table(beta_plus, file = file_path, append = FALSE, col.names = FALSE, row.names = FALSE)
write.table(beta_minus, file = file_path, append = TRUE, col.names = FALSE, row.names = FALSE)
write.table(theta, file = file_path, append = TRUE, col.names = FALSE, row.names = FALSE)
}
# Example usage:
# Define sample data for beta_plus, beta_minus, and theta
beta_plus <- c(1, 2, 3)
beta_minus <- c(4, 5, 6)
theta <- matrix(1:9, nrow = 3, ncol = 3)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "initial"
store_vectors_theta(beta_plus, beta_minus, theta, folder_name, file_name)
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- read.table(file_path)
# Split the data into beta_plus, beta_minus, and theta
n <- length(data) / 2
beta_plus <- as.vector(data[1:n, ])
beta_minus <- as.vector(data[(n + 1):(2 * n), ])
theta <- matrix(data[(2 * n + 1):length(data)], ncol = nrow(theta))
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "initial"
data <- read_vectors_theta(folder_name, file_name)
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- read.table(file_path)
# Split the data into beta_plus, beta_minus, and theta
n <- length(data) / 3
beta_plus <- as.vector(data[1:n, ])
beta_minus <- as.vector(data[(n + 1):(2 * n), ])
theta <- matrix(data[(2 * n + 1):length(data)], ncol = nrow(theta))
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "initial"
data <- read_vectors_theta(folder_name, file_name)
# Access the vectors and matrix
beta_plus <- data$beta_plus
beta_minus <- data$beta_minus
theta <- data$theta
beta_plus
beta_minus
theta
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- read.table(file_path)
# Split the data into beta_plus, beta_minus, and theta
n <- length(data) / 3
print(n)
beta_plus <- as.vector(data[1:n, ])
beta_minus <- as.vector(data[(n + 1):(2 * n), ])
theta <- matrix(data[(2 * n + 1):length(data)], ncol = nrow(theta))
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "initial"
data <- read_vectors_theta(folder_name, file_name)
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- scan(file_path)
# Split the data into beta_plus, beta_minus, and theta
n <- length(data) / 3
print(n)
beta_plus <- as.vector(data[1:n, ])
beta_minus <- as.vector(data[(n + 1):(2 * n), ])
theta <- matrix(data[(2 * n + 1):length(data)], ncol = nrow(theta))
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "initial"
data <- read_vectors_theta(folder_name, file_name)
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- scan(file_path)
# Split the data into beta_plus, beta_minus, and theta
p <- sqrt(length(data)+1)-1 ## there are p^2 +2p elems
print(p)
beta_plus <- as.vector(data[1:p, ])
beta_minus <- as.vector(data[(p + 1):(2 * p), ])
theta <- matrix(data[(2 * p + 1):length(data)], ncol = nrow(theta))
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "initial"
data <- read_vectors_theta(folder_name, file_name)
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- scan(file_path)
# Split the data into beta_plus, beta_minus, and theta
p <- sqrt(length(data)+1)-1 ## there are p^2 +2p elems
print(p)
beta_plus <- as.vector(data[1:p])
beta_minus <- as.vector(data[(p + 1):(2 * p)])
theta <- matrix(data[(2 * p + 1):length(data)], ncol = nrow(theta))
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "initial"
data <- read_vectors_theta(folder_name, file_name)
# Access the vectors and matrix
beta_plus <- data$beta_plus
beta_minus <- data$beta_minus
theta <- data$theta
beta_plus
beta_minus
theta
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-7,
max_iter=7000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-7,
max_iter=7000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
lamhat=0.1
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-7,
max_iter=12000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-7,
max_iter=12000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=12000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=12000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=16000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=0.1, t=t, tol=1e-8,
max_iter=16000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
fitted
y_pred<-myWeakHierNet$predict(self=fitted, X_all_test)
plot(y_pred, scale(y_test, scale= FALSE))
sum(abs(fitted$Theta_hat)<=0.000001)
###se the nr of 0s
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
lamhat=1
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
print(fit$th)
options(max.print=1e6)
print(fit)
print(dim(fit$th))
#checkBlocks(fit$th,15,4)
fit$th
fit$lam
max(yhat)
max(y_test)
print("------------")
y_train
zero_matrix_operation(fit$th,21,14,2,3)
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=1, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=1, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
lamhat=10
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd1_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
fitted
y_pred<-myWeakHierNet$predict(self=fitted, X_all_test)
plot(y_pred, scale(y_test, scale= FALSE))
sum(abs(fitted$Theta_hat)<=0.000001)
###se the nr of 0s
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd10_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
folder_name <- "Results"
file_name <- "llmd1_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
read_vectors_theta <- function(folder_name, file_name) {
# Create the full file path
file_path <- file.path(folder_name, paste0(file_name, ".txt"))
# Read data from the file
data <- scan(file_path)
# Split the data into beta_plus, beta_minus, and theta
p <- sqrt(length(data)+1)-1 ## there are p^2 +2p elems
print(p)
beta_plus <- as.vector(data[1:p])
beta_minus <- as.vector(data[(p + 1):(2 * p)])
theta <- matrix(data[(2 * p + 1):length(data)], ncol = p)
return(list(beta_plus = beta_plus, beta_minus = beta_minus, theta = theta))
}
# Example usage:
folder_name <- "Results"
file_name <- "llmd1_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
find(theta_lmd1==0)
lm1_idx=which(theta_lmd1==0)
lm10_idx=which(fitted$Theta_hat==0)
lm1_idx
intersect(lm1_idx, lm10_idx)
length(intersect(lm1_idx, lm10_idx))
length(lm1_idx)
length(lm10_idx)
source("WeakHierNet_Class_corrected.R")
print('My weakhiernet')
t<-6e-7+3e-8
#t<-0.001
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=10, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=50, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd50_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
# Example usage:
folder_name <- "Results"
file_name <- "llmd10_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm10_idx)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lamhat=50
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
lm1_idx=which(fit$th==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
myWeakHierNet<-WeakHierNet (X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-8,
max_iter=15000, eps=1e-8)  #Increase max iter if needed or decrease tol
# Fit the model
fitted=myWeakHierNet$fit(X=X_all_train, Beta_plus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1), Beta_minus_init=matrix(0,nrow = dim(X_all_train)[2], ncol = 1),
Theta_init=matrix(0, ncol = dim(X_all_train)[2], nrow = dim(X_all_train)[2]), y=y_train, lambda=80, t=t, tol=1e-8,
max_iter=15000, eps=1e-8 )
# Make predictions
new_X <- X_all_test
print("R2 train")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(X_all_train), y_true = y_train, verbose = TRUE)
print("R2 test")
myWeakHierNet$R2_score(self=fitted, new_X= as.matrix(new_X), y_true = y_test, verbose = TRUE)
zero_matrix_operation(fitted$Theta_hat,21,14,2,3,0)
# Call the function to store the vectors and theta in a file
folder_name <- "Results"
file_name <- "llmd80_it15k"
store_vectors_theta(fitted$Beta_hat_plus, fitted$Beta_hat_minus, fitted$Theta_hat, folder_name, file_name)
# Example usage:
folder_name <- "Results"
file_name <- "llmd50_it15k"
data <- read_vectors_theta(folder_name, file_name)
theta_lmd1 <- data$theta
lm1_idx=which(fit$th==0)
lm2_idx=which(theta_lmd1==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lm1_idx=which(theta_lmd1==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
lamhat=80
fit=hierNet(X_all_train,y_train, lam = lamhat, diagonal = FALSE)
yhat_test=predict(fit,X_all_test)
yhat_train=predict(fit,X_all_train)
print("-----Library hiernet-----")
print(paste("rmse train:",rmse(y_train, yhat_train)))
print(paste("r2 train:", r2(y_train, yhat_train)))
print(paste("rmse test:",rmse(y_test, yhat_test)))
print(paste("r2 test:", r2(y_test, yhat_test)))
zero_matrix_operation(fit$th,21,14,2,3)
lm1_idx=which(fit$th==0)
lm2_idx=which(fitted$Theta_hat==0)
length(intersect(lm1_idx, lm2_idx))
length(lm1_idx)
length(lm2_idx)
