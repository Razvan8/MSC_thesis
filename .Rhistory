}
return(theta_bound)
}
lambda <-1e3
t<-2e-6+5e-7
eps=1e-8
psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
#print(dim(x.all))
#print(length(beta_hat[42:length(beta_hat)]))
#print(dim(X_3way_train))
#print(dim(X_all_main))
###DO PROPER THETA BOUND##################!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#theta_bound<- matrix(20,nrow=40,ncol=40) ###de verificat#########################
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
theta_bound<-matrix(10,40,40)
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=700, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=700,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
print(myWeakHierNet_seq$R2_score(fitted,X_3way_train,r_2way_train))
lambda <-3e3
t<-2e-6+5e-7
eps=1e-8
psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
theta_bound<-matrix(10,40,40)
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=700, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=700,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
lambda <-3e3
t<-3e-6+5e-7
eps=1e-8
psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
#print(dim(x.all))
#print(length(beta_hat[42:length(beta_hat)]))
#print(dim(X_3way_train))
#print(dim(X_all_main))
###DO PROPER THETA BOUND##################!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#theta_bound<- matrix(20,nrow=40,ncol=40) ###de verificat#########################
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
theta_bound<-matrix(10,40,40)
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=700, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=700,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
lambda <-3e3
t<-2e-6+5e-7
eps=1e-8
psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
#print(dim(x.all))
#print(length(beta_hat[42:length(beta_hat)]))
#print(dim(X_3way_train))
#print(dim(X_all_main))
###DO PROPER THETA BOUND##################!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#theta_bound<- matrix(20,nrow=40,ncol=40) ###de verificat#########################
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
theta_bound<-matrix(0.1,40,40)
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=700, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=700,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
lambda <-9e2
t<-2e-6+5e-7
eps=1e-8
psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
#print(dim(x.all))
#print(length(beta_hat[42:length(beta_hat)]))
#print(dim(X_3way_train))
#print(dim(X_all_main))
###DO PROPER THETA BOUND##################!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#theta_bound<- matrix(20,nrow=40,ncol=40) ###de verificat#########################
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
theta_bound<-matrix(0.2,40,40)
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=700, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=700,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
lambda <-7e2
t<-2e-6+5e-7
eps=1e-8
psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
#print(dim(x.all))
#print(length(beta_hat[42:length(beta_hat)]))
#print(dim(X_3way_train))
#print(dim(X_all_main))
###DO PROPER THETA BOUND##################!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#theta_bound<- matrix(20,nrow=40,ncol=40) ###de verificat#########################
theta_bound<- get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])*5
theta_bound<-matrix(0.2,40,40)
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=700, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=700,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
print(myWeakHierNet_seq$R2_score(fitted,X_3way_train,r_2way_train))
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])
max(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]))
min(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]))
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/2
theta_bound
max(theta_bound)
max(abs(r_2way_train))
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/4
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
new_X <- X_3way_test
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/20
min(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]))
#theta_bound<-matrix(0.2,40,40)
max(theta_bound)
max(abs(r_2way_train))
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
new_X <- X_3way_test
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
get_psi_from_psi_vec<-function(psi_vec,l1=21,l2=14, l3=2,l4=3)
{ counter<-1
psi<-array(0,dim=(c(40,40,40)))
### CASE 1+case 2 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi[i,j,k]<-psi_vec[counter]/6
psi[i,k,j]<-psi_vec[counter]/6
psi[k,i,j]<-psi_vec[counter]/6
psi[k,j,i]<-psi_vec[counter]/6
psi[j,i,k]<-psi_vec[counter]/6
psi[j,k,i]<-psi_vec[counter]/6
counter<-counter+1
}}} ##case 1 : add, aryl-halide base/lig
### CASE 3 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi[i,j,k]<-psi_vec[counter]/6
psi[i,k,j]<-psi_vec[counter]/6
psi[k,i,j]<-psi_vec[counter]/6
psi[k,j,i]<-psi_vec[counter]/6
psi[j,i,k]<-psi_vec[counter]/6
psi[j,k,i]<-psi_vec[counter]/6
counter<-counter+1
}}}
### CASE 4 have halide,  base, ligand
for (i in c((l1+1):(l1+l2)) ) { #halide
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
psi[i,j,k]<-psi_vec[counter]/6
psi[i,k,j]<-psi_vec[counter]/6
psi[k,i,j]<-psi_vec[counter]/6
psi[k,j,i]<-psi_vec[counter]/6
psi[j,i,k]<-psi_vec[counter]/6
psi[j,k,i]<-psi_vec[counter]/6
counter<-counter+1
}}}
return(psi)
}
lasso_model <- glmnet(x = X_3way_train, y = r_2way_train, alpha = 1, lambda = 0.003)
coef(lasso_model)
coef(lasso_model[-1])
coef(lasso_model[2:length(lasso_model)])
array(coef(lasso_model)[2:length(lasso_model)])
array(coef(lasso_model)[2:length(lcoef(lasso_model))])
array(coef(lasso_model)[2:length(coef(lasso_model))])
array(coef(lasso_model)[1:length(coef(lasso_model))])
coef(lasso_model)
array(coef(lasso_model)[1:length(coef(lasso_model))])
array(coef(lasso_model)[2:length(coef(lasso_model))])
psi_vec_init<-array(coef(lasso_model)[2:length(coef(lasso_model))])
get_psi_from_psi_vec<-function(psi_vec,l1=21,l2=14, l3=2,l4=3)
{ counter<-1
psi<-array(0,dim=(c(40,40,40)))
### CASE 1+case 2 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi[i,j,k]<-psi_vec[counter]/6
psi[i,k,j]<-psi_vec[counter]/6
psi[k,i,j]<-psi_vec[counter]/6
psi[k,j,i]<-psi_vec[counter]/6
psi[j,i,k]<-psi_vec[counter]/6
psi[j,k,i]<-psi_vec[counter]/6
counter<-counter+1
}}} ##case 1 : add, aryl-halide base/lig
### CASE 3 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi[i,j,k]<-psi_vec[counter]/6
psi[i,k,j]<-psi_vec[counter]/6
psi[k,i,j]<-psi_vec[counter]/6
psi[k,j,i]<-psi_vec[counter]/6
psi[j,i,k]<-psi_vec[counter]/6
psi[j,k,i]<-psi_vec[counter]/6
counter<-counter+1
}}}
### CASE 4 have halide,  base, ligand
for (i in c((l1+1):(l1+l2)) ) { #halide
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
psi[i,j,k]<-psi_vec[counter]/6
psi[i,k,j]<-psi_vec[counter]/6
psi[k,i,j]<-psi_vec[counter]/6
psi[k,j,i]<-psi_vec[counter]/6
psi[j,i,k]<-psi_vec[counter]/6
psi[j,k,i]<-psi_vec[counter]/6
counter<-counter+1
}}}
print(counter)
return(psi)
}
psi_init<-get_psi_from_psi_vec(psi_vec_init)
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/20
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
new_X <- X_3way_test
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
sum(abs(fitted$vec_psi_hat)==0)
lambda <-1e2
t<-2e-6+5e-7
eps=1e-8
#psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
psi_init<-get_psi_from_psi_vec(psi_vec_init)
#print(dim(x.all))
#print(length(beta_hat[42:length(beta_hat)]))
#print(dim(X_3way_train))
#print(dim(X_all_main))
###DO PROPER THETA BOUND##################!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#theta_bound<- matrix(20,nrow=40,ncol=40) ###de verificat#########################
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/2
min(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]))
#theta_bound<-matrix(0.2,40,40)
max(theta_bound)
max(abs(r_2way_train))
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
print(myWeakHierNet_seq$R2_score(fitted,X_3way_train,r_2way_train))
print(myWeakHierNet_seq$R2_score(fitted,X_3way_test,r_2way_test))
print(r2(y_train, y_pred_train+mean(y_train)))
beta_hat<-read_vector_from_txt(folder_path, filename, column_names = colnames(X_all_train))$vector
y_pred_train<-sapply(as.vector(as.matrix(X_all_train)%*%beta_hat[-1]+beta_hat[1]), my_k_prime)
y_pred_test<-sapply(as.vector(as.matrix(X_all_test)%*%beta_hat[-1]+beta_hat[1]), my_k_prime)
#get_elements(c('base 1', 'additive 17', 'base 2:ligand 3'), read_vector_from_txt(folder_path, filename, column_names = colnames(X_all_train)))
r_2way_train<-y_train-y_pred_train
r_2way_test<-y_test-y_pred_test
# Fit Lasso model
lasso_model <- glmnet(x = X_3way_train, y = r_2way_train, alpha = 1, lambda = 0.003)
psi_vec_init<-array(coef(lasso_model)[2:length(coef(lasso_model))])
coef(lasso_model)
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/2
min(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]))
#theta_bound<-matrix(0.2,40,40)
max(theta_bound)
max(abs(r_2way_train))
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
pred_train<-scale(X_3way_train)%*%fitted$vec_psi_hat+mean(r_2way_train)
pred_test2<- ((X_3way_test-colMeans(X_3way_train))/apply(X_3way_train,2,sd) ) %*%fitted$vec_psi_hat+mean(r_2way_train)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test2))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+mean(y_train)))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test2))
folder_path <- 'Results'
filename <- 'GLM_lmd0.1.txt'
beta_hat<-read_vector_from_txt(folder_path, filename, column_names = colnames(X_all_train))$vector
y_pred_train<-sapply(as.vector(as.matrix(X_all_train)%*%beta_hat[-1]+beta_hat[1]), my_k_prime)
y_pred_test<-sapply(as.vector(as.matrix(X_all_test)%*%beta_hat[-1]+beta_hat[1]), my_k_prime)
r_2way_train<-y_train-y_pred_train
r_2way_test<-y_test-y_pred_test
mean(r_2way_test)
mean(r_2way_train)
print("rmse mine:")
print(sqrt(mean((pred_train*100-y_train*100)^2)))
print('r2 mine')
print(r2(y_train, y_pred_train))
print(r2(y_test, y_pred_test))
print(sum(abs(beta_hat)<=1e-5))
plot(y_test, pred_test)
r_2way_train<-y_train-y_pred_train
r_2way_test<-y_test-y_pred_test
lasso_model <- glmnet(x = X_3way_train, y = r_2way_train, alpha = 1, lambda = 0.003)
psi_vec_init<-array(coef(lasso_model)[2:length(coef(lasso_model))])
coef(lasso_model)
# Predictions for training data
train_predictions_3way <- predict(lasso_model, newx = X_3way_train)
# Predictions for test data
test_predictions_3way <- predict(lasso_model, newx = X_3way_test)
print(r2(r_2way_train,train_predictions_3way))
print(r2(r_2way_test,test_predictions_3way))
print(sqrt(mean((pred_train*100-y_train*100)^2)))
print('r2 mine')
print(r2(y_train, y_pred_train))
print(r2(y_test, y_pred_test))
print(sum(abs(beta_hat)<=1e-5))
lasso_model <- glmnet(x = X_3way_train, y = r_2way_train, alpha = 1, lambda = 0.003)
psi_vec_init<-array(coef(lasso_model)[2:length(coef(lasso_model))])
coef(lasso_model)
# Predictions for training data
train_predictions_3way <- predict(lasso_model, newx = X_3way_train)
# Predictions for test data
test_predictions_3way <- predict(lasso_model, newx = X_3way_test)
print(r2(r_2way_train,train_predictions_3way))
print(r2(r_2way_test,test_predictions_3way))
theta_bound<-  ( get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]) +t(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)])) )/2
min(get_thetabound_from_theta_hat(beta_hat[42:length(beta_hat)]))
#theta_bound<-matrix(0.2,40,40)
max(theta_bound)
max(abs(r_2way_train))
# Example usage:
# Create an instance of the WeakHierNet class
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
print(myWeakHierNet_seq$R2_score(fitted,X_3way_train,r_2way_train))
print(myWeakHierNet_seq$R2_score(fitted,X_3way_test,r_2way_test))
pred_train<- myWeakHierNet_seq$pred(fitted,X_3way_train)
pred_test<- myWeakHierNet_seq$pred(fitted,X_3way_test)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test2))
lambda <-5e1
t<-2e-6+5e-7
eps=1e-8
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
new_X <- X_3way_test
pred_train<- myWeakHierNet_seq$pred(fitted,X_3way_train)
pred_test<- myWeakHierNet_seq$pred(fitted,X_3way_test)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test))
print(myWeakHierNet_seq$R2_score(fitted,X_3way_train,r_2way_train))
print(myWeakHierNet_seq$R2_score(fitted,X_3way_test,r_2way_test))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test2))
lambda <-2e2
t<-2e-6+5e-7
eps=1e-8
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
pred_train<- myWeakHierNet_seq$pred(fitted,X_3way_train)
pred_test<- myWeakHierNet_seq$pred(fitted,X_3way_test)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test))
lambda <-5e1
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
new_X <- X_3way_test
pred_train<- myWeakHierNet_seq$pred(fitted,X_3way_train)
pred_test<- myWeakHierNet_seq$pred(fitted,X_3way_test)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test))
sum(abs(fitted$vec_psi_hat)==0)
lambda <-2e2
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
lambda <-2e1
t<-2e-6+5e-7
eps=1e-8
#psi_init<-array(rnorm(40*40*40, mean = 0, sd = 2), dim = c(40,40,40))
psi_init<-get_psi_from_psi_vec(psi_vec_init)
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
new_X <- X_3way_test
pred_train<- myWeakHierNet_seq$pred(fitted,X_3way_train)
pred_test<- myWeakHierNet_seq$pred(fitted,X_3way_test)
print(r2(r_2way_train,pred_train))
print(r2(r_2way_test,pred_test))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test))
sum(abs(fitted$vec_psi_hat)==0)
lambda <-1e1
myWeakHierNet_seq <- WeakHierNet_seq(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=5e-8, max_iter=900, eps=1e-8,
l1=21,l2=14,l3=2,l4=3)
# Fit the model
fitted=myWeakHierNet_seq$fit(X=X_3way_train, psi_init=psi_init, y=r_2way_train, theta_bound=theta_bound, lambda=lambda, t=t, tol=1e-8, max_iter=900,
eps=1e-8,l1=21,l2=14,l3=2,l4=3)
sum(abs(fitted$vec_psi_hat)==0)
print(myWeakHierNet_seq$R2_score(fitted,X_3way_train,r_2way_train))
print(myWeakHierNet_seq$R2_score(fitted,X_3way_test,r_2way_test))
print(r2(y_train, y_pred_train))
print(r2(y_train, y_pred_train+pred_train))
print(r2(y_test, y_pred_test))
print(r2(y_test, y_pred_test+pred_test))
print(sum(abs(beta_hat==0)))
print(sum(abs(beta_hat<=1e-5)))
lasso_model <- glmnet(x = X_3way_train, y = r_2way_train, alpha = 1, lambda = 0.003)
psi_vec_init<-array(coef(lasso_model)[2:length(coef(lasso_model))])
coef(lasso_model)
# Predictions for training data
train_predictions_3way <- predict(lasso_model, newx = X_3way_train)
# Predictions for test data
test_predictions_3way <- predict(lasso_model, newx = X_3way_test)
print(r2(r_2way_train,train_predictions_3way))
print(r2(r_2way_test,test_predictions_3way))
lasso_model <- glmnet(x = X_3way_train, y = r_2way_train, alpha = 1, lambda = 0.003)
psi_vec_init<-array(coef(lasso_model)[2:length(coef(lasso_model))])
train_predictions_3way <- predict(lasso_model, newx = X_3way_train)
# Predictions for test data
test_predictions_3way <- predict(lasso_model, newx = X_3way_test)
print(r2(r_2way_train,train_predictions_3way))
print(r2(r_2way_test,test_predictions_3way))
print(r2(y_train, y_pred_train + train_predictions_3way))
print(r2(y_test, y_pred_test + test_predictions_3way))
