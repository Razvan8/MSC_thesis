return(position_psi)
}
table_position_to_vector_index(c(25,37,39))
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 +(z-l123)}
return(position_psi)
}
table_position_to_vector_index(c(25,37,39))
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 +(z-l123)}
return(position_psi)
}
table_position_to_vector_index(c(3,23,38))
table_position_to_vector_index(c(3,37,40))
table_position_to_vector_index(c(1,22,36))
table_position_to_vector_index(c(1,22,40))
table_position_to_vector_index(c(1,23,36))
table_position_to_vector_index(c(1,25,36))
table_position_to_vector_index(c(1,25,37))
table_position_to_vector_index(c(2,23,37))
array(0, dim=c(10))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
table_position_to_vector_index<- function(position_tuple, l1=21,l2=14,l3=2,l4=3) ## takes into account only possible combinations
{
sum_comb_l234<-l2*l3+l2*l4+l3*l4
l34<-l3+l4
l12<-l1+l2
l123<-l1+l2+l3
x<-position_tuple[1]
y<-position_tuple[2]
z<-position_tuple[3]
#case 1: additive aryl-halide base/lig
if (x<l1+1 & y <l1+l2+1 )
{position_psi<-(x-1)*sum_comb_l234 + (y-l1-1)*l34 + (z-l12) }
#case 3: additive base ligand
if (x<l1+1 & y<l1+l2+l3+1 & y>l1+l2 )
{position_psi<- (x-1)*sum_comb_l234 + l2*l34 + (y-l12-1)*l4 + (z-l123)}
#case 4: aryl-halide base ligand
if (x>l1)
{position_psi<- l1*sum_comb_l234 + (x-1-l1)*l3*l4 + (y-l12-1)*l4 +(z-l123)}
return(position_psi)
}
#table_position_to_vector_index(c(2,23,37))
get_psi_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
psi_vec<-array(0, dim=c(l1*l2*l3+l1*l2*l4+l1*l3*l4+l2*l3*l4) )
### CASE 1 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 2 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 3 have halide,  base, ligand
for (i in c(l1+1:l1+l2)) { #halide
for (j in c((l1l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
return(psi_vec)
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[1, 5, 9] <- 6
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
get_psi_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
psi_vec<-array(0, dim=c(l1*l2*l3+l1*l2*l4+l1*l3*l4+l2*l3*l4) )
### CASE 1 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 2 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 3 have halide,  base, ligand
for (i in c(l1+1:l1+l2)) { #halide
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
return(psi_vec)
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[1, 5, 9] <- 6
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 9] <- 3
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
get_psi_vec<-function(psi,l1=21,l2=14,l3=2,l4=3)
{
assert(all(dim(psi)==l1+l2+l3+l4), "Dimensions are not ok")
psi_vec<-array(0, dim=c(l1*l2*l3+l1*l2*l4+l1*l3*l4+l2*l3*l4) )
### CASE 1 have additive, aryl halide and anything else
for (i in c(1:l1)) { #add
for (j in c((l1+1):(l1+l2) ) ) { #halide
for (k in c( (l1+l2+1): (l1+l2+l3+l4) ) ) {  #base\lig
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 2 have additive,  base, ligand
for (i in c(1:l1)) { #add
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
### CASE 3 have halide,  base, ligand
for (i in c((l1+1):(l1+l2)) ) { #halide
for (j in c((l1+l2+1):(l1+l2+l3) ) ) { #base
for (k in c( (l1+l2+l3+1): (l1+l2+l3+l4) ) ) {  #ligand
#cat("i:", i, ", j:", j, ", k:", k ,'\n')
psi_vec[table_position_to_vector_index(c(i,j,k),l1=l1,l2=2,l3=l3,l4=l4)]<-psi_value_from_table_position(psi,i,j,k)
}}}
return(psi_vec)
}
psi<-  array(0, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 9] <- 3
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
psi<-  array(6, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 9] <- 6
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
length(get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2))
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
x<-array(0,dim=c(3,3,2))
print(x[1,1,])
c(c(1,2,3),c(2,3))
list(c(1,2,3),c(2,3))
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi.l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
psi[i, ,j]=0
psi[,i,j]=0}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
psi[i, ,j]=0
psi[,i,j]=0}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]=0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]<-0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,c(1:(l1+l2+l3+l4))]<-0
#psi[i, ,j]=0
#psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=3,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]<-0
psi[i, ,j]=0
psi[,i,j]=0
}}}
}
set_0s_psi(psi, l1=3,l2=2,l3=2,l4=2)
psi<-  array(1, dim = c(9, 9, 9))
# 123 45 67 89
# Set some positions to 1
psi[1, 4, 6] <- 6
psi[1, 4, 7] <- 6
psi[5, 7, 8] <- 0
list(c(1,2,3),c(2,3))
get_psi_vec(psi = psi,l1=3,l2=2,l3=2,l4=2)
set_0s_psi<-function(psi,l1=21,l2=14,l3=2,l4=3)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
## ij same range
for ( range in list(range1, range2, range3, range4) ){
for (i in  range) {
for (j in range)  {
psi[i,j,]<-0
psi[i, ,j]=0
psi[,i,j]=0
}}}
return(psi)
}
set_0s_psi(psi, l1=3,l2=2,l3=2,l4=2)
get_all_possible_kj<-function(l1=21,l2=14,l3=3,l4=2)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
all_possible = c(range1, range2, range3, range4)
possible_kj=list()
## ij
for ( range in list(range1, range2, range3, range4)  ){
for (i in range){
for (j in setdiff(all_possible,range) ){
possible_kj<-append(possible_kj,c(i,j))
}}}
return(possible_kj)
}
get_all_possible_kj(l1=3,l2=2,l3=2,l4=2)
get_all_possible_kj<-function(l1=21,l2=14,l3=3,l4=2)
{range1<-c(1:l1)
range2<-c((l1+1):(l1+l2))
range3<-c((l1+l2+1):(l1+l2+l3))
range4<-c((l1+l2+l3+1):(l1+l2+l3+l4))
all_possible = c(range1, range2, range3, range4)
possible_kj=list()
## ij
for ( range in list(range1, range2, range3, range4)  ){
for (i in range){
for (j in setdiff(all_possible,range) ){
possible_kj <- c(possible_kj, list(c(i, j)))
}}}
return(possible_kj)
}
get_all_possible_kj(l1=3,l2=2,l3=2,l4=2)
get_all_possible_kj(l1=21,l2=14,l3=3,l4=2)
# Create a diagonal matrix with 1s on the diagonal
diag_matrix <- diag(1, nrow = 2, ncol=2)
repeated_matrix <- do.call(rbind, replicate(5,diag_matrix, simplify = FALSE))
repeated_matrix
# Assign the combined matrix to the dataset
X <- repeated_matrix
# Create a beta vector of length 32
beta <- numeric(32)
for (i in 1:length(beta)) {
beta[i] <- i %% 5
}
print(beta)
noise <- rnorm(n, mean = 0, sd = 0.2)
n <- 32*5
noise <- rnorm(n, mean = 0, sd = 0.2)
# Generate response variable
y <- X%*%beta+noise
print(dim(X))
print(dim(beta))
n <- 32*5
# Create a diagonal matrix with 1s on the diagonal
diag_matrix <- diag(1, nrow = 32, ncol=32)
repeated_matrix <- do.call(rbind, replicate(5,diag_matrix, simplify = FALSE))
# Assign the combined matrix to the dataset
X <- repeated_matrix
print(dim(X))
print(dim(beta))
# Create a beta vector of length 32
beta <- numeric(32)
for (i in 1:length(beta)) {
beta[i] <- i %% 5
}
noise <- rnorm(n, mean = 0, sd = 0.2)
# Generate response variable
y <- X%*%beta+noise
print(y)
library(caret)
# Assuming X and y are your predictor variables and response variable, respectively
# Set the seed for reproducibility
set.seed(123)
# Split the data into training and testing sets
train_index <- createDataPartition(y, p = 0.7)
X_train <- X[train_index, ]
# Split the data into training and testing sets
train_index <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_index, ]
X_test <- X[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
r2 <- function(actual, predicted) {
# Calculate the mean of the actual values
mean_actual <- mean(actual)
# Calculate the total sum of squares
total_sum_squares <- sum((actual - mean_actual)^2)
# Calculate the residual sum of squares
residual_sum_squares <- sum((actual - predicted)^2)
# Calculate R-squared
r_squared <- 1 - (residual_sum_squares / total_sum_squares)
return(r_squared)
}
lm_model <- lm(y_train ~ X_train)
# Predict on X_test
predictions <- predict(lm_model, newdata = as.data.frame(X_test))
print(r2(y_test,predictions))
train_index <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_index, ]
X_test <- X[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
lm_model <- lm(y_train ~ X_train)
# Predict on X_test
predictions <- predict(lm_model, newdata = as.data.frame(X_test))
print(r2(y_test,predictions))
# Number of rows in the dataset
n <- 32*5
# Create a diagonal matrix with 1s on the diagonal
diag_matrix <- diag(1, nrow = 32, ncol=32)
repeated_matrix <- do.call(rbind, replicate(5,diag_matrix, simplify = FALSE))
# Assign the combined matrix to the dataset
X <- repeated_matrix
print(dim(X))
print(dim(beta))
# Create a beta vector of length 32
beta <- numeric(32)
for (i in 1:length(beta)) {
beta[i] <- i %% 5
}
noise <- rnorm(n, mean = 0, sd = 0.2)
# Generate response variable
y <- X%*%beta+noise
print(y)
train_index <- createDataPartition(y, p = 0.7, list = FALSE)
X_train <- X[train_index, ]
X_test <- X[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
print(length(y_train))
print(dim(X_train))
lm_model <- lm(y_train ~ X_train)
predictions <- predict(lm_model, newdata = as.data.frame(X_test))
print(r2(y_test,predictions))
lm_model <- lm(y_train ~ ., data = as.data.frame(X_train))
# Predict on X_test
predictions <- predict(lm_model, newdata = as.data.frame(X_test))
print(r2(y_test,predictions))
predictions_test <- predict(lm_model, newdata = as.data.frame(X_test))
predictions_train<-predict(lm_model, newdata =  as.data.frame(X_train))
print(r2(y_train, predictions_train))
print(r2(y_test,predictions_test))
